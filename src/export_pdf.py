import os
import time
import fitz  # PyMuPDF
import google.generativeai as genai
import pandas as pd
import json
import ssl
import requests

# üîß D√©sactiver la v√©rification SSL (Fix temporaire pour les r√©seaux d'entreprise)
ssl._create_default_https_context = ssl._create_unverified_context
requests.packages.urllib3.disable_warnings()

API_KEY = input("üîë Enter your Gemini API key: ").strip()

genai.configure(api_key=API_KEY)

print("‚úÖ API key configured successfully!")

# S√©lection du mod√®le Gemini
model = genai.GenerativeModel("gemini-1.5-flash")

# üìå D√©finition des colonnes pour le fichier Excel
COLUMNS = [
    "Raison sociale", "Sigle", "Responsabilit√© l√©gale", "Adresse", "T√©l√©phone", "Portable", "E-mail",
    "Site Internet", "SIRET", "Code NACE", "Assurance Travaux",
    "Assurance Civile", "Effectif moyen", "Chiffre d‚Äôaffaires H.T.", "Qualifications professionnelles"
]

# ‚è≥ Gestion du quota API (attendre 1 min toutes les 10 requ√™tes)
MAX_REQUESTS_BEFORE_PAUSE = 10
request_count = 0

def extraire_texte_pdf(chemin_fichier):
    """Extrait le texte d'un fichier PDF."""
    texte = ""
    try:
        with fitz.open(chemin_fichier) as doc:
            for page in doc:
                texte += page.get_text() + "\n"
    except Exception as e:
        print(f"‚ùå Erreur lors de l'extraction du texte ({chemin_fichier}): {e}")
    return texte

def limiter_requetes():
    """G√®re le quota de requ√™tes en ajoutant une pause de 1 minute toutes les 10 requ√™tes."""
    global request_count
    request_count += 1

    if request_count % MAX_REQUESTS_BEFORE_PAUSE == 0:
        print("‚è≥ Limite atteinte ! Pause de 1 minute...")
        time.sleep(60)  # Pause de 1 minute

def analyser_contenu_avec_gemini(contenu):
    """Envoie le texte extrait √† l'API Gemini et r√©cup√®re les informations format√©es."""

    prompt = f"""
Analyse ce document et extrais les informations suivantes :
- Raison sociale
- Sigle
- Responsabilit√© l√©gale (Nom et fonction des principaux responsables l√©gaux, ex: "MERGUI CYRIL RESPONSABLE DE SERVICE" ou "PILLOT EPOUSE NAHI CATHERINE G√âRANT(E) ASSOCI√â(E) MAJORITAIRE / NAHI NORDINE CO-G√âRANT")
- Adresse compl√®te
- T√©l√©phone et portable
- Email
- Site Internet
- SIRET
- Code NACE
- Assurance Travaux
- Assurance Civile
- Effectif moyen
- Chiffre d'affaires HT (si disponible)
- Qualifications professionnelles (avec retour √† la ligne entre chaque entr√©e)

Donne la r√©ponse au format **JSON** structur√©, comme ceci :
```json
{{
"Raison sociale": "...",
"Sigle": "...",
"Responsabilit√© l√©gale": "...",
"Adresse": "...",
"T√©l√©phone": "...",
"Portable": "...",
"E-mail": "...",
"Site Internet": "...",
"SIRET": "...",
"Code NACE": "...",
"Assurance Travaux": "...",
"Assurance Civile": "...",
"Effectif moyen": "...",
"Chiffre d‚Äôaffaires H.T.": "...",
"Qualifications professionnelles": "..."
}}
```

Contenu du fichier PDF :
        {contenu}
        """

    try:
        limiter_requetes()  # üîπ V√©rifie la limite d'API avant d'envoyer la requ√™te
        response = model.generate_content(prompt)
        result = response.text  # Obtenir le texte brut

        if "```json" in result:
            result = result.split("```json")[1].split("```")[0].strip()  # Extraction JSON

        # Utilisation de json.loads() pour √©viter les erreurs de `null`
        parsed_data = json.loads(result)

        return parsed_data
    except json.JSONDecodeError as e:
        print(f"‚ö†Ô∏è Erreur de parsing JSON : {e}")
    except Exception as e:
        print(f"‚ö†Ô∏è Erreur avec Gemini : {e}")

    return None

def traiter_dossier_pdf(chemin_dossier):
    """Parcourt un dossier, extrait et analyse les PDF puis g√©n√®re un fichier Excel."""
    donnees = []

    for nom_fichier in os.listdir(chemin_dossier):
        if nom_fichier.endswith(".pdf"):
            chemin_complet = os.path.join(chemin_dossier, nom_fichier)
            print(f"üìÑ Traitement du fichier : {nom_fichier}")

            texte = extraire_texte_pdf(chemin_complet)
            if texte:
                resultat = analyser_contenu_avec_gemini(texte)
                if resultat:
                    donnees.append(resultat)
                else:
                    print(f"‚ö†Ô∏è Aucune r√©ponse obtenue pour {nom_fichier}")
            else:
                print(f"‚ö†Ô∏è Aucun texte extrait pour {nom_fichier}")

    # üìä G√©n√©ration du fichier Excel
    if donnees:
        df = pd.DataFrame(donnees, columns=COLUMNS)
        df["Qualifications professionnelles"] = df["Qualifications professionnelles"].str.replace(";", "\n")  # Retour √† la ligne
        fichier_sortie = os.path.join(chemin_dossier, "export_qualifications.xlsx")
        df.to_excel(fichier_sortie, index=False)
        print(f"‚úÖ Extraction termin√©e ! Fichier g√©n√©r√© : {fichier_sortie}")

if __name__ == "__main__":
    chemin_dossier = input("Entrez le chemin du dossier contenant les fichiers PDF : ")
    traiter_dossier_pdf(chemin_dossier)